services:
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION: ${MINIO_REGION}
    volumes:
      - ./volumes/minio:/data
    # (healthcheck removed to avoid tooling dependency inside image)

  mc:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5 &&
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb --ignore-existing local/${MINIO_BUCKET_RAW} &&
      mc mb --ignore-existing local/${MINIO_BUCKET_CURATED} &&
      mc mb --ignore-existing local/${MINIO_BUCKET_AGG} &&
      exit 0
      "

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data

  airflow-webserver:
    image: apache/airflow:2.9.3
    depends_on:
      - postgres
      - minio
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: ${AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX}
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
      _PIP_ADDITIONAL_REQUIREMENTS: "apache-airflow-providers-amazon==8.23.0 boto3==1.34.131 apache-airflow-providers-docker==3.12.0"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/requirements.txt:/requirements.txt
      - ./volumes/airflow:/opt/airflow
    command: webserver
    ports:
      - "8081:8080"

  airflow-scheduler:
    image: apache/airflow:2.9.3
    depends_on:
      - airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
      _PIP_ADDITIONAL_REQUIREMENTS: "apache-airflow-providers-amazon==8.23.0 boto3==1.34.131 apache-airflow-providers-docker==3.12.0"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/requirements.txt:/requirements.txt
      - ./volumes/airflow:/opt/airflow
    command: scheduler

  spark:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=master
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3A_PATH_STYLE_ACCESS=${S3A_PATH_STYLE_ACCESS}
    volumes:
      - ./services/preprocess/spark_app:/opt/spark-apps
      - ./config/spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    ports:
      - "7077:7077"
      - "8082:8080"

  spark-worker:
    image: bitnami/spark:3.5
    depends_on:
      - spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3A_PATH_STYLE_ACCESS=${S3A_PATH_STYLE_ACCESS}
    volumes:
      - ./services/preprocess/spark_app:/opt/spark-apps

  ingest:
    build:
      context: ./services/ingest
    environment:
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_RAW: ${MINIO_BUCKET_RAW}
    volumes:
      - ./data_source:/data_source:ro
    depends_on:
      - minio

  delivery:
    build:
      context: ./services/delivery
    environment:
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_AGG: ${MINIO_BUCKET_AGG}
      MINIO_REGION: ${MINIO_REGION}
      DELIVERY_PORT: ${DELIVERY_PORT}
    ports:
      - "${DELIVERY_PORT}:8080"
    depends_on:
      - minio
